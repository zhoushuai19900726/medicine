package ${package}.controller;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.company.project.common.aop.annotation.DataScope;
import com.company.project.common.aop.annotation.LogAnnotation;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.apache.commons.lang.StringUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Controller;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import java.util.List;
import com.company.project.common.utils.DataResult;

import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;

import javax.annotation.Resource;


/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/")
public class ${className}Controller extends BaseController {

    @Resource
    private ${className}Service ${classname}Service;


    @ApiOperation(value = "跳转到列表页面")
    @GetMapping("/index/${classname}")
    public String ${classname}() {
        return "${classNameLower}/list";
        }

    @ApiOperation(value = "跳转进入新增/编辑页面")
    @GetMapping("/index/${classname}/addOrUpdate")
    public String addOrUpdate() {
        return "${classNameLower}/addOrUpdate";
    }

    @ApiOperation(value = "新增")
    @PostMapping("${classname}/add")
    @RequiresPermissions("${classname}:add")
    @LogAnnotation(title = "${comments}", action = "新增")
    @ResponseBody
    public DataResult add(@RequestBody ${className}Entity ${classname}){
        return DataResult.success(${classname}Service.save(${classname}));
    }

    @ApiOperation(value = "删除")
    @DeleteMapping("${classname}/delete")
    @RequiresPermissions("${classname}:delete")
    @LogAnnotation(title = "${comments}", action = "删除")
    @ResponseBody
    public DataResult delete(@RequestBody @ApiParam(value = "id集合") List<String> ids){
        return DataResult.success(${classname}Service.removeByIds(ids));
    }

    @ApiOperation(value = "更新")
    @PutMapping("${classname}/update")
    @RequiresPermissions("${classname}:update")
    @LogAnnotation(title = "${comments}", action = "更新")
    @ResponseBody
    public DataResult update(@RequestBody ${className}Entity ${classname}){
        return DataResult.success(${classname}Service.updateById(${classname}));
    }

    @ApiOperation(value = "查询分页数据")
    @PostMapping("${classname}/listByPage")
    @RequiresPermissions("${classname}:list")
    @LogAnnotation(title = "${comments}", action = "查询分页数据")
    @DataScope
    @ResponseBody
    public DataResult findListByPage(@RequestBody ${className}Entity ${classname}){
        // 分页初始化
        Page<${className}Entity> page = new Page<>(${classname}.getPage(), ${classname}.getLimit());
        // 查询条件
        LambdaQueryWrapper<${className}Entity> queryWrapper = Wrappers.lambdaQuery();
        queryWrapper
                .eq(StringUtils.isNotBlank(${classname}.getId()), ${className}Entity::getId, ${classname}.getId())
                .orderByDesc(${className}Entity::getCreateTime);
        // 封装数据权限 - 执行查询 - 封装用户 - 响应前端
        return DataResult.success(encapsulationUser(${classname}Service.page(page, encapsulationDataRights(${classname}, queryWrapper, ${className}Entity::getCreateId))));
    }

}
